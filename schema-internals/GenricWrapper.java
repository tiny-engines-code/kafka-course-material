/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.chrislomeli.kafka.generator.loadgenerator.schema;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class NotificationStatus extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 9188160226931610406L;

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static SpecificData MODEL$ = new SpecificData();

    static {
        MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    }

    private static final BinaryMessageEncoder<NotificationStatus> ENCODER =
            new BinaryMessageEncoder<NotificationStatus>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<NotificationStatus> DECODER =
            new BinaryMessageDecoder<NotificationStatus>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<NotificationStatus> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<NotificationStatus> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<NotificationStatus> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<NotificationStatus>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this NotificationStatus to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a NotificationStatus from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a NotificationStatus instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static NotificationStatus fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /** NGAP required unique id for this request, this user, and this channel (concat request_id + user_notification_id) */
    @Deprecated
    public java.lang.CharSequence send_id;
    /** UTC time in milliseconds when this service began processing this record */
    @Deprecated
    public java.time.Instant start_time;
    /** The time in UTC millseconds when this service existed */
    @Deprecated
    public java.time.Instant end_time;
    /** UTC time in milliseconds that this service received this request */
    @Deprecated
    public java.time.Instant received_time;
    /** UTC time in milliseconds that this service published its output */
    @Deprecated
    public java.time.Instant publish_time;
    /** CDS API version number */
    @Deprecated
    public java.lang.CharSequence api_version;
    /** The service creating this record */
    @Deprecated
    public java.lang.CharSequence app;
    /** The service creating this record */
    @Deprecated
    public java.lang.CharSequence application;
    /** The NCP team - always Notifications:CDS */
    @Deprecated
    public java.lang.CharSequence appteam;
    /** The host where the service was running */
    @Deprecated
    public java.lang.CharSequence awshost;
    /** NCP com_id */
    @Deprecated
    public java.lang.CharSequence comm_id;
    /** NCP cp_code */
    @Deprecated
    public java.lang.CharSequence cp_code;
    /** EMAIL,PUSH,SMS,INBOX */
    @Deprecated
    public java.lang.CharSequence delivery_channel;
    /** NGAP required destination is null before transporter and the phone or email or wechatid - depending on the channel */
    @Deprecated
    public java.lang.CharSequence destination;
    /** The environment .e.g perf, prod, etc */
    @Deprecated
    public java.lang.CharSequence environment;
    /** Descriptive event class */
    @Deprecated
    public java.lang.CharSequence eventtype;
    /** Locale e.g. US, UK... */
    @Deprecated
    public java.lang.CharSequence locale_country;
    /** Language e.g. en, fr, ja... */
    @Deprecated
    public java.lang.CharSequence locale_language;
    /** TBD */
    @Deprecated
    public int metric;
    /** NCP notification type */
    @Deprecated
    public java.lang.CharSequence notification_type;
    /** The lifecycle state this record is in */
    @Deprecated
    public com.chrislomeli.kafka.generator.loadgenerator.schema.NOTIFICATION_STATE_TYPE record_type;
    /** NCP request Id */
    @Deprecated
    public java.lang.CharSequence request_id;
    /** App team and service name string */
    @Deprecated
    public java.lang.CharSequence short_name;
    /** The status of this record */
    @Deprecated
    public com.chrislomeli.kafka.generator.loadgenerator.schema.NOTIFICATION_STATUS_TYPE status;
    /** NGAP required failure reason, but should just call it message in case it gets used for non failures in future */
    @Deprecated
    public java.lang.CharSequence message;
    /** accept_request, gather_data, determine_target, render, transport */
    @Deprecated
    public java.lang.CharSequence step;
    /** The time in milliseconds that this record took to process within this application */
    @Deprecated
    public long time_taken;
    @Deprecated
    public java.lang.CharSequence tag;
    /** NCP user identifier */
    @Deprecated
    public java.lang.CharSequence upmid;
    /** NCP user notification identity */
    @Deprecated
    public java.lang.CharSequence user_notification_id;
    /** NGAP required vendor that this notification is directed to - this is null before determine_target */
    @Deprecated
    public java.lang.CharSequence vendor;
    /** CDS version number .e.g. v2 */
    @Deprecated
    public java.lang.CharSequence version;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public NotificationStatus() {
    }

    /**
     * All-args constructor.
     * @param send_id NGAP required unique id for this request, this user, and this channel (concat request_id + user_notification_id)
     * @param start_time UTC time in milliseconds when this service began processing this record
     * @param end_time The time in UTC millseconds when this service existed
     * @param received_time UTC time in milliseconds that this service received this request
     * @param publish_time UTC time in milliseconds that this service published its output
     * @param api_version CDS API version number
     * @param app The service creating this record
     * @param application The service creating this record
     * @param appteam The NCP team - always Notifications:CDS
     * @param awshost The host where the service was running
     * @param comm_id NCP com_id
     * @param cp_code NCP cp_code
     * @param delivery_channel EMAIL,PUSH,SMS,INBOX
     * @param destination NGAP required destination is null before transporter and the phone or email or wechatid - depending on the channel
     * @param environment The environment .e.g perf, prod, etc
     * @param eventtype Descriptive event class
     * @param locale_country Locale e.g. US, UK...
     * @param locale_language Language e.g. en, fr, ja...
     * @param metric TBD
     * @param notification_type NCP notification type
     * @param record_type The lifecycle state this record is in
     * @param request_id NCP request Id
     * @param short_name App team and service name string
     * @param status The status of this record
     * @param message NGAP required failure reason, but should just call it message in case it gets used for non failures in future
     * @param step accept_request, gather_data, determine_target, render, transport
     * @param time_taken The time in milliseconds that this record took to process within this application
     * @param tag The new value for tag
     * @param upmid NCP user identifier
     * @param user_notification_id NCP user notification identity
     * @param vendor NGAP required vendor that this notification is directed to - this is null before determine_target
     * @param version CDS version number .e.g. v2
     */
    public NotificationStatus(java.lang.CharSequence send_id, java.time.Instant start_time, java.time.Instant end_time, java.time.Instant received_time, java.time.Instant publish_time, java.lang.CharSequence api_version, java.lang.CharSequence app, java.lang.CharSequence application, java.lang.CharSequence appteam, java.lang.CharSequence awshost, java.lang.CharSequence comm_id, java.lang.CharSequence cp_code, java.lang.CharSequence delivery_channel, java.lang.CharSequence destination, java.lang.CharSequence environment, java.lang.CharSequence eventtype, java.lang.CharSequence locale_country, java.lang.CharSequence locale_language, java.lang.Integer metric, java.lang.CharSequence notification_type, com.chrislomeli.kafka.generator.loadgenerator.schema.NOTIFICATION_STATE_TYPE record_type, java.lang.CharSequence request_id, java.lang.CharSequence short_name, com.chrislomeli.kafka.generator.loadgenerator.schema.NOTIFICATION_STATUS_TYPE status, java.lang.CharSequence message, java.lang.CharSequence step, java.lang.Long time_taken, java.lang.CharSequence tag, java.lang.CharSequence upmid, java.lang.CharSequence user_notification_id, java.lang.CharSequence vendor, java.lang.CharSequence version) {
        this.send_id = send_id;
        this.start_time = start_time.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
        this.end_time = end_time.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
        this.received_time = received_time.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
        this.publish_time = publish_time.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
        this.api_version = api_version;
        this.app = app;
        this.application = application;
        this.appteam = appteam;
        this.awshost = awshost;
        this.comm_id = comm_id;
        this.cp_code = cp_code;
        this.delivery_channel = delivery_channel;
        this.destination = destination;
        this.environment = environment;
        this.eventtype = eventtype;
        this.locale_country = locale_country;
        this.locale_language = locale_language;
        this.metric = metric;
        this.notification_type = notification_type;
        this.record_type = record_type;
        this.request_id = request_id;
        this.short_name = short_name;
        this.status = status;
        this.message = message;
        this.step = step;
        this.time_taken = time_taken;
        this.tag = tag;
        this.upmid = upmid;
        this.user_notification_id = user_notification_id;
        this.vendor = vendor;
        this.version = version;
    }

    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return send_id;
            case 1:
                return start_time;
            case 2:
                return end_time;
            case 3:
                return received_time;
            case 4:
                return publish_time;
            case 5:
                return api_version;
            case 6:
                return app;
            case 7:
                return application;
            case 8:
                return appteam;
            case 9:
                return awshost;
            case 10:
                return comm_id;
            case 11:
                return cp_code;
            case 12:
                return delivery_channel;
            case 13:
                return destination;
            case 14:
                return environment;
            case 15:
                return eventtype;
            case 16:
                return locale_country;
            case 17:
                return locale_language;
            case 18:
                return metric;
            case 19:
                return notification_type;
            case 20:
                return record_type;
            case 21:
                return request_id;
            case 22:
                return short_name;
            case 23:
                return status;
            case 24:
                return message;
            case 25:
                return step;
            case 26:
                return time_taken;
            case 27:
                return tag;
            case 28:
                return upmid;
            case 29:
                return user_notification_id;
            case 30:
                return vendor;
            case 31:
                return version;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    private static final org.apache.avro.Conversion<?>[] conversions =
            new org.apache.avro.Conversion<?>[]{
                    null,
                    new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
                    new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
                    new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
                    new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null
            };

    @Override
    public org.apache.avro.Conversion<?> getConversion(int field) {
        return conversions[field];
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                send_id = (java.lang.CharSequence) value$;
                break;
            case 1:
                start_time = (java.time.Instant) value$;
                break;
            case 2:
                end_time = (java.time.Instant) value$;
                break;
            case 3:
                received_time = (java.time.Instant) value$;
                break;
            case 4:
                publish_time = (java.time.Instant) value$;
                break;
            case 5:
                api_version = (java.lang.CharSequence) value$;
                break;
            case 6:
                app = (java.lang.CharSequence) value$;
                break;
            case 7:
                application = (java.lang.CharSequence) value$;
                break;
            case 8:
                appteam = (java.lang.CharSequence) value$;
                break;
            case 9:
                awshost = (java.lang.CharSequence) value$;
                break;
            case 10:
                comm_id = (java.lang.CharSequence) value$;
                break;
            case 11:
                cp_code = (java.lang.CharSequence) value$;
                break;
            case 12:
                delivery_channel = (java.lang.CharSequence) value$;
                break;
            case 13:
                destination = (java.lang.CharSequence) value$;
                break;
            case 14:
                environment = (java.lang.CharSequence) value$;
                break;
            case 15:
                eventtype = (java.lang.CharSequence) value$;
                break;
            case 16:
                locale_country = (java.lang.CharSequence) value$;
                break;
            case 17:
                locale_language = (java.lang.CharSequence) value$;
                break;
            case 18:
                metric = (java.lang.Integer) value$;
                break;
            case 19:
                notification_type = (java.lang.CharSequence) value$;
                break;
            case 20:
                record_type = (com.chrislomeli.kafka.generator.loadgenerator.schema.NOTIFICATION_STATE_TYPE) value$;
                break;
            case 21:
                request_id = (java.lang.CharSequence) value$;
                break;
            case 22:
                short_name = (java.lang.CharSequence) value$;
                break;
            case 23:
                status = (com.chrislomeli.kafka.generator.loadgenerator.schema.NOTIFICATION_STATUS_TYPE) value$;
                break;
            case 24:
                message = (java.lang.CharSequence) value$;
                break;
            case 25:
                step = (java.lang.CharSequence) value$;
                break;
            case 26:
                time_taken = (java.lang.Long) value$;
                break;
            case 27:
                tag = (java.lang.CharSequence) value$;
                break;
            case 28:
                upmid = (java.lang.CharSequence) value$;
                break;
            case 29:
                user_notification_id = (java.lang.CharSequence) value$;
                break;
            case 30:
                vendor = (java.lang.CharSequence) value$;
                break;
            case 31:
                version = (java.lang.CharSequence) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'send_id' field.
     * @return NGAP required unique id for this request, this user, and this channel (concat request_id + user_notification_id)
     */
    public java.lang.CharSequence getSendId() {
        return send_id;
    }


    /**
     * Sets the value of the 'send_id' field.
     * NGAP required unique id for this request, this user, and this channel (concat request_id + user_notification_id)
     * @param value the value to set.
     */
    public void setSendId(java.lang.CharSequence value) {
        this.send_id = value;
    }

    /**
     * Gets the value of the 'start_time' field.
     * @return UTC time in milliseconds when this service began processing this record
     */
    public java.time.Instant getStartTime() {
        return start_time;
    }


    /**
     * Sets the value of the 'start_time' field.
     * UTC time in milliseconds when this service began processing this record
     * @param value the value to set.
     */
    public void setStartTime(java.time.Instant value) {
        this.start_time = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    }

    /**
     * Gets the value of the 'end_time' field.
     * @return The time in UTC millseconds when this service existed
     */
    public java.time.Instant getEndTime() {
        return end_time;
    }


    /**
     * Sets the value of the 'end_time' field.
     * The time in UTC millseconds when this service existed
     * @param value the value to set.
     */
    public void setEndTime(java.time.Instant value) {
        this.end_time = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    }

    /**
     * Gets the value of the 'received_time' field.
     * @return UTC time in milliseconds that this service received this request
     */
    public java.time.Instant getReceivedTime() {
        return received_time;
    }


    /**
     * Sets the value of the 'received_time' field.
     * UTC time in milliseconds that this service received this request
     * @param value the value to set.
     */
    public void setReceivedTime(java.time.Instant value) {
        this.received_time = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    }

    /**
     * Gets the value of the 'publish_time' field.
     * @return UTC time in milliseconds that this service published its output
     */
    public java.time.Instant getPublishTime() {
        return publish_time;
    }


    /**
     * Sets the value of the 'publish_time' field.
     * UTC time in milliseconds that this service published its output
     * @param value the value to set.
     */
    public void setPublishTime(java.time.Instant value) {
        this.publish_time = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    }

    /**
     * Gets the value of the 'api_version' field.
     * @return CDS API version number
     */
    public java.lang.CharSequence getApiVersion() {
        return api_version;
    }


    /**
     * Sets the value of the 'api_version' field.
     * CDS API version number
     * @param value the value to set.
     */
    public void setApiVersion(java.lang.CharSequence value) {
        this.api_version = value;
    }

    /**
     * Gets the value of the 'app' field.
     * @return The service creating this record
     */
    public java.lang.CharSequence getApp() {
        return app;
    }


    /**
     * Sets the value of the 'app' field.
     * The service creating this record
     * @param value the value to set.
     */
    public void setApp(java.lang.CharSequence value) {
        this.app = value;
    }

    /**
     * Gets the value of the 'application' field.
     * @return The service creating this record
     */
    public java.lang.CharSequence getApplication() {
        return application;
    }


    /**
     * Sets the value of the 'application' field.
     * The service creating this record
     * @param value the value to set.
     */
    public void setApplication(java.lang.CharSequence value) {
        this.application = value;
    }

    /**
     * Gets the value of the 'appteam' field.
     * @return The NCP team - always Notifications:CDS
     */
    public java.lang.CharSequence getAppteam() {
        return appteam;
    }


    /**
     * Sets the value of the 'appteam' field.
     * The NCP team - always Notifications:CDS
     * @param value the value to set.
     */
    public void setAppteam(java.lang.CharSequence value) {
        this.appteam = value;
    }

    /**
     * Gets the value of the 'awshost' field.
     * @return The host where the service was running
     */
    public java.lang.CharSequence getAwshost() {
        return awshost;
    }


    /**
     * Sets the value of the 'awshost' field.
     * The host where the service was running
     * @param value the value to set.
     */
    public void setAwshost(java.lang.CharSequence value) {
        this.awshost = value;
    }

    /**
     * Gets the value of the 'comm_id' field.
     * @return NCP com_id
     */
    public java.lang.CharSequence getCommId() {
        return comm_id;
    }


    /**
     * Sets the value of the 'comm_id' field.
     * NCP com_id
     * @param value the value to set.
     */
    public void setCommId(java.lang.CharSequence value) {
        this.comm_id = value;
    }

    /**
     * Gets the value of the 'cp_code' field.
     * @return NCP cp_code
     */
    public java.lang.CharSequence getCpCode() {
        return cp_code;
    }


    /**
     * Sets the value of the 'cp_code' field.
     * NCP cp_code
     * @param value the value to set.
     */
    public void setCpCode(java.lang.CharSequence value) {
        this.cp_code = value;
    }

    /**
     * Gets the value of the 'delivery_channel' field.
     * @return EMAIL, PUSH, SMS, INBOX
     */
    public java.lang.CharSequence getDeliveryChannel() {
        return delivery_channel;
    }


    /**
     * Sets the value of the 'delivery_channel' field.
     * EMAIL,PUSH,SMS,INBOX
     * @param value the value to set.
     */
    public void setDeliveryChannel(java.lang.CharSequence value) {
        this.delivery_channel = value;
    }

    /**
     * Gets the value of the 'destination' field.
     * @return NGAP required destination is null before transporter and the phone or email or wechatid - depending on the channel
     */
    public java.lang.CharSequence getDestination() {
        return destination;
    }


    /**
     * Sets the value of the 'destination' field.
     * NGAP required destination is null before transporter and the phone or email or wechatid - depending on the channel
     * @param value the value to set.
     */
    public void setDestination(java.lang.CharSequence value) {
        this.destination = value;
    }

    /**
     * Gets the value of the 'environment' field.
     * @return The environment .e.g perf, prod, etc
     */
    public java.lang.CharSequence getEnvironment() {
        return environment;
    }


    /**
     * Sets the value of the 'environment' field.
     * The environment .e.g perf, prod, etc
     * @param value the value to set.
     */
    public void setEnvironment(java.lang.CharSequence value) {
        this.environment = value;
    }

    /**
     * Gets the value of the 'eventtype' field.
     * @return Descriptive event class
     */
    public java.lang.CharSequence getEventtype() {
        return eventtype;
    }


    /**
     * Sets the value of the 'eventtype' field.
     * Descriptive event class
     * @param value the value to set.
     */
    public void setEventtype(java.lang.CharSequence value) {
        this.eventtype = value;
    }

    /**
     * Gets the value of the 'locale_country' field.
     * @return Locale e.g. US, UK...
     */
    public java.lang.CharSequence getLocaleCountry() {
        return locale_country;
    }


    /**
     * Sets the value of the 'locale_country' field.
     * Locale e.g. US, UK...
     * @param value the value to set.
     */
    public void setLocaleCountry(java.lang.CharSequence value) {
        this.locale_country = value;
    }

    /**
     * Gets the value of the 'locale_language' field.
     * @return Language e.g. en, fr, ja...
     */
    public java.lang.CharSequence getLocaleLanguage() {
        return locale_language;
    }


    /**
     * Sets the value of the 'locale_language' field.
     * Language e.g. en, fr, ja...
     * @param value the value to set.
     */
    public void setLocaleLanguage(java.lang.CharSequence value) {
        this.locale_language = value;
    }

    /**
     * Gets the value of the 'metric' field.
     * @return TBD
     */
    public int getMetric() {
        return metric;
    }


    /**
     * Sets the value of the 'metric' field.
     * TBD
     * @param value the value to set.
     */
    public void setMetric(int value) {
        this.metric = value;
    }

    /**
     * Gets the value of the 'notification_type' field.
     * @return NCP notification type
     */
    public java.lang.CharSequence getNotificationType() {
        return notification_type;
    }


    /**
     * Sets the value of the 'notification_type' field.
     * NCP notification type
     * @param value the value to set.
     */
    public void setNotificationType(java.lang.CharSequence value) {
        this.notification_type = value;
    }

    /**
     * Gets the value of the 'record_type' field.
     * @return The lifecycle state this record is in
     */
    public com.chrislomeli.kafka.generator.loadgenerator.schema.NOTIFICATION_STATE_TYPE getRecordType() {
        return record_type;
    }


    /**
     * Sets the value of the 'record_type' field.
     * The lifecycle state this record is in
     * @param value the value to set.
     */
    public void setRecordType(com.chrislomeli.kafka.generator.loadgenerator.schema.NOTIFICATION_STATE_TYPE value) {
        this.record_type = value;
    }

    /**
     * Gets the value of the 'request_id' field.
     * @return NCP request Id
     */
    public java.lang.CharSequence getRequestId() {
        return request_id;
    }


    /**
     * Sets the value of the 'request_id' field.
     * NCP request Id
     * @param value the value to set.
     */
    public void setRequestId(java.lang.CharSequence value) {
        this.request_id = value;
    }

    /**
     * Gets the value of the 'short_name' field.
     * @return App team and service name string
     */
    public java.lang.CharSequence getShortName() {
        return short_name;
    }


    /**
     * Sets the value of the 'short_name' field.
     * App team and service name string
     * @param value the value to set.
     */
    public void setShortName(java.lang.CharSequence value) {
        this.short_name = value;
    }

    /**
     * Gets the value of the 'status' field.
     * @return The status of this record
     */
    public com.chrislomeli.kafka.generator.loadgenerator.schema.NOTIFICATION_STATUS_TYPE getStatus() {
        return status;
    }


    /**
     * Sets the value of the 'status' field.
     * The status of this record
     * @param value the value to set.
     */
    public void setStatus(com.chrislomeli.kafka.generator.loadgenerator.schema.NOTIFICATION_STATUS_TYPE value) {
        this.status = value;
    }

    /**
     * Gets the value of the 'message' field.
     * @return NGAP required failure reason, but should just call it message in case it gets used for non failures in future
     */
    public java.lang.CharSequence getMessage() {
        return message;
    }


    /**
     * Sets the value of the 'message' field.
     * NGAP required failure reason, but should just call it message in case it gets used for non failures in future
     * @param value the value to set.
     */
    public void setMessage(java.lang.CharSequence value) {
        this.message = value;
    }

    /**
     * Gets the value of the 'step' field.
     * @return accept_request, gather_data, determine_target, render, transport
     */
    public java.lang.CharSequence getStep() {
        return step;
    }


    /**
     * Sets the value of the 'step' field.
     * accept_request, gather_data, determine_target, render, transport
     * @param value the value to set.
     */
    public void setStep(java.lang.CharSequence value) {
        this.step = value;
    }

    /**
     * Gets the value of the 'time_taken' field.
     * @return The time in milliseconds that this record took to process within this application
     */
    public long getTimeTaken() {
        return time_taken;
    }


    /**
     * Sets the value of the 'time_taken' field.
     * The time in milliseconds that this record took to process within this application
     * @param value the value to set.
     */
    public void setTimeTaken(long value) {
        this.time_taken = value;
    }

    /**
     * Gets the value of the 'tag' field.
     * @return The value of the 'tag' field.
     */
    public java.lang.CharSequence getTag() {
        return tag;
    }


    /**
     * Sets the value of the 'tag' field.
     * @param value the value to set.
     */
    public void setTag(java.lang.CharSequence value) {
        this.tag = value;
    }

    /**
     * Gets the value of the 'upmid' field.
     * @return NCP user identifier
     */
    public java.lang.CharSequence getUpmid() {
        return upmid;
    }


    /**
     * Sets the value of the 'upmid' field.
     * NCP user identifier
     * @param value the value to set.
     */
    public void setUpmid(java.lang.CharSequence value) {
        this.upmid = value;
    }

    /**
     * Gets the value of the 'user_notification_id' field.
     * @return NCP user notification identity
     */
    public java.lang.CharSequence getUserNotificationId() {
        return user_notification_id;
    }


    /**
     * Sets the value of the 'user_notification_id' field.
     * NCP user notification identity
     * @param value the value to set.
     */
    public void setUserNotificationId(java.lang.CharSequence value) {
        this.user_notification_id = value;
    }

    /**
     * Gets the value of the 'vendor' field.
     * @return NGAP required vendor that this notification is directed to - this is null before determine_target
     */
    public java.lang.CharSequence getVendor() {
        return vendor;
    }


    /**
     * Sets the value of the 'vendor' field.
     * NGAP required vendor that this notification is directed to - this is null before determine_target
     * @param value the value to set.
     */
    public void setVendor(java.lang.CharSequence value) {
        this.vendor = value;
    }

    /**
     * Gets the value of the 'version' field.
     * @return CDS version number .e.g. v2
     */
    public java.lang.CharSequence getVersion() {
        return version;
    }


    /**
     * Sets the value of the 'version' field.
     * CDS version number .e.g. v2
     * @param value the value to set.
     */
    public void setVersion(java.lang.CharSequence value) {
        this.version = value;
    }

    /**
     * Creates a new NotificationStatus RecordBuilder.
     * @return A new NotificationStatus RecordBuilder
     */
    public static com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder newBuilder() {
        return new com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder();
    }

    /**
     * Creates a new NotificationStatus RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new NotificationStatus RecordBuilder
     */
    public static com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder newBuilder(com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder other) {
        if (other == null) {
            return new com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder();
        } else {
            return new com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder(other);
        }
    }

    /**
     * Creates a new NotificationStatus RecordBuilder by copying an existing NotificationStatus instance.
     * @param other The existing instance to copy.
     * @return A new NotificationStatus RecordBuilder
     */
    public static com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder newBuilder(com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus other) {
        if (other == null) {
            return new com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder();
        } else {
            return new com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder(other);
        }
    }

    /**
     * RecordBuilder for NotificationStatus instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NotificationStatus>
            implements org.apache.avro.data.RecordBuilder<NotificationStatus> {

        /** NGAP required unique id for this request, this user, and this channel (concat request_id + user_notification_id) */
        private java.lang.CharSequence send_id;
        /** UTC time in milliseconds when this service began processing this record */
        private java.time.Instant start_time;
        /** The time in UTC millseconds when this service existed */
        private java.time.Instant end_time;
        /** UTC time in milliseconds that this service received this request */
        private java.time.Instant received_time;
        /** UTC time in milliseconds that this service published its output */
        private java.time.Instant publish_time;
        /** CDS API version number */
        private java.lang.CharSequence api_version;
        /** The service creating this record */
        private java.lang.CharSequence app;
        /** The service creating this record */
        private java.lang.CharSequence application;
        /** The NCP team - always Notifications:CDS */
        private java.lang.CharSequence appteam;
        /** The host where the service was running */
        private java.lang.CharSequence awshost;
        /** NCP com_id */
        private java.lang.CharSequence comm_id;
        /** NCP cp_code */
        private java.lang.CharSequence cp_code;
        /** EMAIL,PUSH,SMS,INBOX */
        private java.lang.CharSequence delivery_channel;
        /** NGAP required destination is null before transporter and the phone or email or wechatid - depending on the channel */
        private java.lang.CharSequence destination;
        /** The environment .e.g perf, prod, etc */
        private java.lang.CharSequence environment;
        /** Descriptive event class */
        private java.lang.CharSequence eventtype;
        /** Locale e.g. US, UK... */
        private java.lang.CharSequence locale_country;
        /** Language e.g. en, fr, ja... */
        private java.lang.CharSequence locale_language;
        /** TBD */
        private int metric;
        /** NCP notification type */
        private java.lang.CharSequence notification_type;
        /** The lifecycle state this record is in */
        private com.chrislomeli.kafka.generator.loadgenerator.schema.NOTIFICATION_STATE_TYPE record_type;
        /** NCP request Id */
        private java.lang.CharSequence request_id;
        /** App team and service name string */
        private java.lang.CharSequence short_name;
        /** The status of this record */
        private com.chrislomeli.kafka.generator.loadgenerator.schema.NOTIFICATION_STATUS_TYPE status;
        /** NGAP required failure reason, but should just call it message in case it gets used for non failures in future */
        private java.lang.CharSequence message;
        /** accept_request, gather_data, determine_target, render, transport */
        private java.lang.CharSequence step;
        /** The time in milliseconds that this record took to process within this application */
        private long time_taken;
        private java.lang.CharSequence tag;
        /** NCP user identifier */
        private java.lang.CharSequence upmid;
        /** NCP user notification identity */
        private java.lang.CharSequence user_notification_id;
        /** NGAP required vendor that this notification is directed to - this is null before determine_target */
        private java.lang.CharSequence vendor;
        /** CDS version number .e.g. v2 */
        private java.lang.CharSequence version;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.send_id)) {
                this.send_id = data().deepCopy(fields()[0].schema(), other.send_id);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.start_time)) {
                this.start_time = data().deepCopy(fields()[1].schema(), other.start_time);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.end_time)) {
                this.end_time = data().deepCopy(fields()[2].schema(), other.end_time);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.received_time)) {
                this.received_time = data().deepCopy(fields()[3].schema(), other.received_time);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.publish_time)) {
                this.publish_time = data().deepCopy(fields()[4].schema(), other.publish_time);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (isValidValue(fields()[5], other.api_version)) {
                this.api_version = data().deepCopy(fields()[5].schema(), other.api_version);
                fieldSetFlags()[5] = other.fieldSetFlags()[5];
            }
            if (isValidValue(fields()[6], other.app)) {
                this.app = data().deepCopy(fields()[6].schema(), other.app);
                fieldSetFlags()[6] = other.fieldSetFlags()[6];
            }
            if (isValidValue(fields()[7], other.application)) {
                this.application = data().deepCopy(fields()[7].schema(), other.application);
                fieldSetFlags()[7] = other.fieldSetFlags()[7];
            }
            if (isValidValue(fields()[8], other.appteam)) {
                this.appteam = data().deepCopy(fields()[8].schema(), other.appteam);
                fieldSetFlags()[8] = other.fieldSetFlags()[8];
            }
            if (isValidValue(fields()[9], other.awshost)) {
                this.awshost = data().deepCopy(fields()[9].schema(), other.awshost);
                fieldSetFlags()[9] = other.fieldSetFlags()[9];
            }
            if (isValidValue(fields()[10], other.comm_id)) {
                this.comm_id = data().deepCopy(fields()[10].schema(), other.comm_id);
                fieldSetFlags()[10] = other.fieldSetFlags()[10];
            }
            if (isValidValue(fields()[11], other.cp_code)) {
                this.cp_code = data().deepCopy(fields()[11].schema(), other.cp_code);
                fieldSetFlags()[11] = other.fieldSetFlags()[11];
            }
            if (isValidValue(fields()[12], other.delivery_channel)) {
                this.delivery_channel = data().deepCopy(fields()[12].schema(), other.delivery_channel);
                fieldSetFlags()[12] = other.fieldSetFlags()[12];
            }
            if (isValidValue(fields()[13], other.destination)) {
                this.destination = data().deepCopy(fields()[13].schema(), other.destination);
                fieldSetFlags()[13] = other.fieldSetFlags()[13];
            }
            if (isValidValue(fields()[14], other.environment)) {
                this.environment = data().deepCopy(fields()[14].schema(), other.environment);
                fieldSetFlags()[14] = other.fieldSetFlags()[14];
            }
            if (isValidValue(fields()[15], other.eventtype)) {
                this.eventtype = data().deepCopy(fields()[15].schema(), other.eventtype);
                fieldSetFlags()[15] = other.fieldSetFlags()[15];
            }
            if (isValidValue(fields()[16], other.locale_country)) {
                this.locale_country = data().deepCopy(fields()[16].schema(), other.locale_country);
                fieldSetFlags()[16] = other.fieldSetFlags()[16];
            }
            if (isValidValue(fields()[17], other.locale_language)) {
                this.locale_language = data().deepCopy(fields()[17].schema(), other.locale_language);
                fieldSetFlags()[17] = other.fieldSetFlags()[17];
            }
            if (isValidValue(fields()[18], other.metric)) {
                this.metric = data().deepCopy(fields()[18].schema(), other.metric);
                fieldSetFlags()[18] = other.fieldSetFlags()[18];
            }
            if (isValidValue(fields()[19], other.notification_type)) {
                this.notification_type = data().deepCopy(fields()[19].schema(), other.notification_type);
                fieldSetFlags()[19] = other.fieldSetFlags()[19];
            }
            if (isValidValue(fields()[20], other.record_type)) {
                this.record_type = data().deepCopy(fields()[20].schema(), other.record_type);
                fieldSetFlags()[20] = other.fieldSetFlags()[20];
            }
            if (isValidValue(fields()[21], other.request_id)) {
                this.request_id = data().deepCopy(fields()[21].schema(), other.request_id);
                fieldSetFlags()[21] = other.fieldSetFlags()[21];
            }
            if (isValidValue(fields()[22], other.short_name)) {
                this.short_name = data().deepCopy(fields()[22].schema(), other.short_name);
                fieldSetFlags()[22] = other.fieldSetFlags()[22];
            }
            if (isValidValue(fields()[23], other.status)) {
                this.status = data().deepCopy(fields()[23].schema(), other.status);
                fieldSetFlags()[23] = other.fieldSetFlags()[23];
            }
            if (isValidValue(fields()[24], other.message)) {
                this.message = data().deepCopy(fields()[24].schema(), other.message);
                fieldSetFlags()[24] = other.fieldSetFlags()[24];
            }
            if (isValidValue(fields()[25], other.step)) {
                this.step = data().deepCopy(fields()[25].schema(), other.step);
                fieldSetFlags()[25] = other.fieldSetFlags()[25];
            }
            if (isValidValue(fields()[26], other.time_taken)) {
                this.time_taken = data().deepCopy(fields()[26].schema(), other.time_taken);
                fieldSetFlags()[26] = other.fieldSetFlags()[26];
            }
            if (isValidValue(fields()[27], other.tag)) {
                this.tag = data().deepCopy(fields()[27].schema(), other.tag);
                fieldSetFlags()[27] = other.fieldSetFlags()[27];
            }
            if (isValidValue(fields()[28], other.upmid)) {
                this.upmid = data().deepCopy(fields()[28].schema(), other.upmid);
                fieldSetFlags()[28] = other.fieldSetFlags()[28];
            }
            if (isValidValue(fields()[29], other.user_notification_id)) {
                this.user_notification_id = data().deepCopy(fields()[29].schema(), other.user_notification_id);
                fieldSetFlags()[29] = other.fieldSetFlags()[29];
            }
            if (isValidValue(fields()[30], other.vendor)) {
                this.vendor = data().deepCopy(fields()[30].schema(), other.vendor);
                fieldSetFlags()[30] = other.fieldSetFlags()[30];
            }
            if (isValidValue(fields()[31], other.version)) {
                this.version = data().deepCopy(fields()[31].schema(), other.version);
                fieldSetFlags()[31] = other.fieldSetFlags()[31];
            }
        }

        /**
         * Creates a Builder by copying an existing NotificationStatus instance
         * @param other The existing instance to copy.
         */
        private Builder(com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.send_id)) {
                this.send_id = data().deepCopy(fields()[0].schema(), other.send_id);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.start_time)) {
                this.start_time = data().deepCopy(fields()[1].schema(), other.start_time);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.end_time)) {
                this.end_time = data().deepCopy(fields()[2].schema(), other.end_time);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.received_time)) {
                this.received_time = data().deepCopy(fields()[3].schema(), other.received_time);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.publish_time)) {
                this.publish_time = data().deepCopy(fields()[4].schema(), other.publish_time);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.api_version)) {
                this.api_version = data().deepCopy(fields()[5].schema(), other.api_version);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.app)) {
                this.app = data().deepCopy(fields()[6].schema(), other.app);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.application)) {
                this.application = data().deepCopy(fields()[7].schema(), other.application);
                fieldSetFlags()[7] = true;
            }
            if (isValidValue(fields()[8], other.appteam)) {
                this.appteam = data().deepCopy(fields()[8].schema(), other.appteam);
                fieldSetFlags()[8] = true;
            }
            if (isValidValue(fields()[9], other.awshost)) {
                this.awshost = data().deepCopy(fields()[9].schema(), other.awshost);
                fieldSetFlags()[9] = true;
            }
            if (isValidValue(fields()[10], other.comm_id)) {
                this.comm_id = data().deepCopy(fields()[10].schema(), other.comm_id);
                fieldSetFlags()[10] = true;
            }
            if (isValidValue(fields()[11], other.cp_code)) {
                this.cp_code = data().deepCopy(fields()[11].schema(), other.cp_code);
                fieldSetFlags()[11] = true;
            }
            if (isValidValue(fields()[12], other.delivery_channel)) {
                this.delivery_channel = data().deepCopy(fields()[12].schema(), other.delivery_channel);
                fieldSetFlags()[12] = true;
            }
            if (isValidValue(fields()[13], other.destination)) {
                this.destination = data().deepCopy(fields()[13].schema(), other.destination);
                fieldSetFlags()[13] = true;
            }
            if (isValidValue(fields()[14], other.environment)) {
                this.environment = data().deepCopy(fields()[14].schema(), other.environment);
                fieldSetFlags()[14] = true;
            }
            if (isValidValue(fields()[15], other.eventtype)) {
                this.eventtype = data().deepCopy(fields()[15].schema(), other.eventtype);
                fieldSetFlags()[15] = true;
            }
            if (isValidValue(fields()[16], other.locale_country)) {
                this.locale_country = data().deepCopy(fields()[16].schema(), other.locale_country);
                fieldSetFlags()[16] = true;
            }
            if (isValidValue(fields()[17], other.locale_language)) {
                this.locale_language = data().deepCopy(fields()[17].schema(), other.locale_language);
                fieldSetFlags()[17] = true;
            }
            if (isValidValue(fields()[18], other.metric)) {
                this.metric = data().deepCopy(fields()[18].schema(), other.metric);
                fieldSetFlags()[18] = true;
            }
            if (isValidValue(fields()[19], other.notification_type)) {
                this.notification_type = data().deepCopy(fields()[19].schema(), other.notification_type);
                fieldSetFlags()[19] = true;
            }
            if (isValidValue(fields()[20], other.record_type)) {
                this.record_type = data().deepCopy(fields()[20].schema(), other.record_type);
                fieldSetFlags()[20] = true;
            }
            if (isValidValue(fields()[21], other.request_id)) {
                this.request_id = data().deepCopy(fields()[21].schema(), other.request_id);
                fieldSetFlags()[21] = true;
            }
            if (isValidValue(fields()[22], other.short_name)) {
                this.short_name = data().deepCopy(fields()[22].schema(), other.short_name);
                fieldSetFlags()[22] = true;
            }
            if (isValidValue(fields()[23], other.status)) {
                this.status = data().deepCopy(fields()[23].schema(), other.status);
                fieldSetFlags()[23] = true;
            }
            if (isValidValue(fields()[24], other.message)) {
                this.message = data().deepCopy(fields()[24].schema(), other.message);
                fieldSetFlags()[24] = true;
            }
            if (isValidValue(fields()[25], other.step)) {
                this.step = data().deepCopy(fields()[25].schema(), other.step);
                fieldSetFlags()[25] = true;
            }
            if (isValidValue(fields()[26], other.time_taken)) {
                this.time_taken = data().deepCopy(fields()[26].schema(), other.time_taken);
                fieldSetFlags()[26] = true;
            }
            if (isValidValue(fields()[27], other.tag)) {
                this.tag = data().deepCopy(fields()[27].schema(), other.tag);
                fieldSetFlags()[27] = true;
            }
            if (isValidValue(fields()[28], other.upmid)) {
                this.upmid = data().deepCopy(fields()[28].schema(), other.upmid);
                fieldSetFlags()[28] = true;
            }
            if (isValidValue(fields()[29], other.user_notification_id)) {
                this.user_notification_id = data().deepCopy(fields()[29].schema(), other.user_notification_id);
                fieldSetFlags()[29] = true;
            }
            if (isValidValue(fields()[30], other.vendor)) {
                this.vendor = data().deepCopy(fields()[30].schema(), other.vendor);
                fieldSetFlags()[30] = true;
            }
            if (isValidValue(fields()[31], other.version)) {
                this.version = data().deepCopy(fields()[31].schema(), other.version);
                fieldSetFlags()[31] = true;
            }
        }

        /**
         * Gets the value of the 'send_id' field.
         * NGAP required unique id for this request, this user, and this channel (concat request_id + user_notification_id)
         * @return The value.
         */
        public java.lang.CharSequence getSendId() {
            return send_id;
        }


        /**
         * Sets the value of the 'send_id' field.
         * NGAP required unique id for this request, this user, and this channel (concat request_id + user_notification_id)
         * @param value The value of 'send_id'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setSendId(java.lang.CharSequence value) {
            validate(fields()[0], value);
            this.send_id = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'send_id' field has been set.
         * NGAP required unique id for this request, this user, and this channel (concat request_id + user_notification_id)
         * @return True if the 'send_id' field has been set, false otherwise.
         */
        public boolean hasSendId() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'send_id' field.
         * NGAP required unique id for this request, this user, and this channel (concat request_id + user_notification_id)
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearSendId() {
            send_id = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'start_time' field.
         * UTC time in milliseconds when this service began processing this record
         * @return The value.
         */
        public java.time.Instant getStartTime() {
            return start_time;
        }


        /**
         * Sets the value of the 'start_time' field.
         * UTC time in milliseconds when this service began processing this record
         * @param value The value of 'start_time'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setStartTime(java.time.Instant value) {
            validate(fields()[1], value);
            this.start_time = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'start_time' field has been set.
         * UTC time in milliseconds when this service began processing this record
         * @return True if the 'start_time' field has been set, false otherwise.
         */
        public boolean hasStartTime() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'start_time' field.
         * UTC time in milliseconds when this service began processing this record
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearStartTime() {
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'end_time' field.
         * The time in UTC millseconds when this service existed
         * @return The value.
         */
        public java.time.Instant getEndTime() {
            return end_time;
        }


        /**
         * Sets the value of the 'end_time' field.
         * The time in UTC millseconds when this service existed
         * @param value The value of 'end_time'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setEndTime(java.time.Instant value) {
            validate(fields()[2], value);
            this.end_time = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'end_time' field has been set.
         * The time in UTC millseconds when this service existed
         * @return True if the 'end_time' field has been set, false otherwise.
         */
        public boolean hasEndTime() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'end_time' field.
         * The time in UTC millseconds when this service existed
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearEndTime() {
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'received_time' field.
         * UTC time in milliseconds that this service received this request
         * @return The value.
         */
        public java.time.Instant getReceivedTime() {
            return received_time;
        }


        /**
         * Sets the value of the 'received_time' field.
         * UTC time in milliseconds that this service received this request
         * @param value The value of 'received_time'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setReceivedTime(java.time.Instant value) {
            validate(fields()[3], value);
            this.received_time = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'received_time' field has been set.
         * UTC time in milliseconds that this service received this request
         * @return True if the 'received_time' field has been set, false otherwise.
         */
        public boolean hasReceivedTime() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'received_time' field.
         * UTC time in milliseconds that this service received this request
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearReceivedTime() {
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'publish_time' field.
         * UTC time in milliseconds that this service published its output
         * @return The value.
         */
        public java.time.Instant getPublishTime() {
            return publish_time;
        }


        /**
         * Sets the value of the 'publish_time' field.
         * UTC time in milliseconds that this service published its output
         * @param value The value of 'publish_time'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setPublishTime(java.time.Instant value) {
            validate(fields()[4], value);
            this.publish_time = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'publish_time' field has been set.
         * UTC time in milliseconds that this service published its output
         * @return True if the 'publish_time' field has been set, false otherwise.
         */
        public boolean hasPublishTime() {
            return fieldSetFlags()[4];
        }


        /**
         * Clears the value of the 'publish_time' field.
         * UTC time in milliseconds that this service published its output
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearPublishTime() {
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'api_version' field.
         * CDS API version number
         * @return The value.
         */
        public java.lang.CharSequence getApiVersion() {
            return api_version;
        }


        /**
         * Sets the value of the 'api_version' field.
         * CDS API version number
         * @param value The value of 'api_version'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setApiVersion(java.lang.CharSequence value) {
            validate(fields()[5], value);
            this.api_version = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'api_version' field has been set.
         * CDS API version number
         * @return True if the 'api_version' field has been set, false otherwise.
         */
        public boolean hasApiVersion() {
            return fieldSetFlags()[5];
        }


        /**
         * Clears the value of the 'api_version' field.
         * CDS API version number
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearApiVersion() {
            api_version = null;
            fieldSetFlags()[5] = false;
            return this;
        }

        /**
         * Gets the value of the 'app' field.
         * The service creating this record
         * @return The value.
         */
        public java.lang.CharSequence getApp() {
            return app;
        }


        /**
         * Sets the value of the 'app' field.
         * The service creating this record
         * @param value The value of 'app'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setApp(java.lang.CharSequence value) {
            validate(fields()[6], value);
            this.app = value;
            fieldSetFlags()[6] = true;
            return this;
        }

        /**
         * Checks whether the 'app' field has been set.
         * The service creating this record
         * @return True if the 'app' field has been set, false otherwise.
         */
        public boolean hasApp() {
            return fieldSetFlags()[6];
        }


        /**
         * Clears the value of the 'app' field.
         * The service creating this record
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearApp() {
            app = null;
            fieldSetFlags()[6] = false;
            return this;
        }

        /**
         * Gets the value of the 'application' field.
         * The service creating this record
         * @return The value.
         */
        public java.lang.CharSequence getApplication() {
            return application;
        }


        /**
         * Sets the value of the 'application' field.
         * The service creating this record
         * @param value The value of 'application'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setApplication(java.lang.CharSequence value) {
            validate(fields()[7], value);
            this.application = value;
            fieldSetFlags()[7] = true;
            return this;
        }

        /**
         * Checks whether the 'application' field has been set.
         * The service creating this record
         * @return True if the 'application' field has been set, false otherwise.
         */
        public boolean hasApplication() {
            return fieldSetFlags()[7];
        }


        /**
         * Clears the value of the 'application' field.
         * The service creating this record
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearApplication() {
            application = null;
            fieldSetFlags()[7] = false;
            return this;
        }

        /**
         * Gets the value of the 'appteam' field.
         * The NCP team - always Notifications:CDS
         * @return The value.
         */
        public java.lang.CharSequence getAppteam() {
            return appteam;
        }


        /**
         * Sets the value of the 'appteam' field.
         * The NCP team - always Notifications:CDS
         * @param value The value of 'appteam'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setAppteam(java.lang.CharSequence value) {
            validate(fields()[8], value);
            this.appteam = value;
            fieldSetFlags()[8] = true;
            return this;
        }

        /**
         * Checks whether the 'appteam' field has been set.
         * The NCP team - always Notifications:CDS
         * @return True if the 'appteam' field has been set, false otherwise.
         */
        public boolean hasAppteam() {
            return fieldSetFlags()[8];
        }


        /**
         * Clears the value of the 'appteam' field.
         * The NCP team - always Notifications:CDS
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearAppteam() {
            appteam = null;
            fieldSetFlags()[8] = false;
            return this;
        }

        /**
         * Gets the value of the 'awshost' field.
         * The host where the service was running
         * @return The value.
         */
        public java.lang.CharSequence getAwshost() {
            return awshost;
        }


        /**
         * Sets the value of the 'awshost' field.
         * The host where the service was running
         * @param value The value of 'awshost'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setAwshost(java.lang.CharSequence value) {
            validate(fields()[9], value);
            this.awshost = value;
            fieldSetFlags()[9] = true;
            return this;
        }

        /**
         * Checks whether the 'awshost' field has been set.
         * The host where the service was running
         * @return True if the 'awshost' field has been set, false otherwise.
         */
        public boolean hasAwshost() {
            return fieldSetFlags()[9];
        }


        /**
         * Clears the value of the 'awshost' field.
         * The host where the service was running
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearAwshost() {
            awshost = null;
            fieldSetFlags()[9] = false;
            return this;
        }

        /**
         * Gets the value of the 'comm_id' field.
         * NCP com_id
         * @return The value.
         */
        public java.lang.CharSequence getCommId() {
            return comm_id;
        }


        /**
         * Sets the value of the 'comm_id' field.
         * NCP com_id
         * @param value The value of 'comm_id'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setCommId(java.lang.CharSequence value) {
            validate(fields()[10], value);
            this.comm_id = value;
            fieldSetFlags()[10] = true;
            return this;
        }

        /**
         * Checks whether the 'comm_id' field has been set.
         * NCP com_id
         * @return True if the 'comm_id' field has been set, false otherwise.
         */
        public boolean hasCommId() {
            return fieldSetFlags()[10];
        }


        /**
         * Clears the value of the 'comm_id' field.
         * NCP com_id
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearCommId() {
            comm_id = null;
            fieldSetFlags()[10] = false;
            return this;
        }

        /**
         * Gets the value of the 'cp_code' field.
         * NCP cp_code
         * @return The value.
         */
        public java.lang.CharSequence getCpCode() {
            return cp_code;
        }


        /**
         * Sets the value of the 'cp_code' field.
         * NCP cp_code
         * @param value The value of 'cp_code'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setCpCode(java.lang.CharSequence value) {
            validate(fields()[11], value);
            this.cp_code = value;
            fieldSetFlags()[11] = true;
            return this;
        }

        /**
         * Checks whether the 'cp_code' field has been set.
         * NCP cp_code
         * @return True if the 'cp_code' field has been set, false otherwise.
         */
        public boolean hasCpCode() {
            return fieldSetFlags()[11];
        }


        /**
         * Clears the value of the 'cp_code' field.
         * NCP cp_code
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearCpCode() {
            cp_code = null;
            fieldSetFlags()[11] = false;
            return this;
        }

        /**
         * Gets the value of the 'delivery_channel' field.
         * EMAIL,PUSH,SMS,INBOX
         * @return The value.
         */
        public java.lang.CharSequence getDeliveryChannel() {
            return delivery_channel;
        }


        /**
         * Sets the value of the 'delivery_channel' field.
         * EMAIL,PUSH,SMS,INBOX
         * @param value The value of 'delivery_channel'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setDeliveryChannel(java.lang.CharSequence value) {
            validate(fields()[12], value);
            this.delivery_channel = value;
            fieldSetFlags()[12] = true;
            return this;
        }

        /**
         * Checks whether the 'delivery_channel' field has been set.
         * EMAIL,PUSH,SMS,INBOX
         * @return True if the 'delivery_channel' field has been set, false otherwise.
         */
        public boolean hasDeliveryChannel() {
            return fieldSetFlags()[12];
        }


        /**
         * Clears the value of the 'delivery_channel' field.
         * EMAIL,PUSH,SMS,INBOX
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearDeliveryChannel() {
            delivery_channel = null;
            fieldSetFlags()[12] = false;
            return this;
        }

        /**
         * Gets the value of the 'destination' field.
         * NGAP required destination is null before transporter and the phone or email or wechatid - depending on the channel
         * @return The value.
         */
        public java.lang.CharSequence getDestination() {
            return destination;
        }


        /**
         * Sets the value of the 'destination' field.
         * NGAP required destination is null before transporter and the phone or email or wechatid - depending on the channel
         * @param value The value of 'destination'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setDestination(java.lang.CharSequence value) {
            validate(fields()[13], value);
            this.destination = value;
            fieldSetFlags()[13] = true;
            return this;
        }

        /**
         * Checks whether the 'destination' field has been set.
         * NGAP required destination is null before transporter and the phone or email or wechatid - depending on the channel
         * @return True if the 'destination' field has been set, false otherwise.
         */
        public boolean hasDestination() {
            return fieldSetFlags()[13];
        }


        /**
         * Clears the value of the 'destination' field.
         * NGAP required destination is null before transporter and the phone or email or wechatid - depending on the channel
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearDestination() {
            destination = null;
            fieldSetFlags()[13] = false;
            return this;
        }

        /**
         * Gets the value of the 'environment' field.
         * The environment .e.g perf, prod, etc
         * @return The value.
         */
        public java.lang.CharSequence getEnvironment() {
            return environment;
        }


        /**
         * Sets the value of the 'environment' field.
         * The environment .e.g perf, prod, etc
         * @param value The value of 'environment'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setEnvironment(java.lang.CharSequence value) {
            validate(fields()[14], value);
            this.environment = value;
            fieldSetFlags()[14] = true;
            return this;
        }

        /**
         * Checks whether the 'environment' field has been set.
         * The environment .e.g perf, prod, etc
         * @return True if the 'environment' field has been set, false otherwise.
         */
        public boolean hasEnvironment() {
            return fieldSetFlags()[14];
        }


        /**
         * Clears the value of the 'environment' field.
         * The environment .e.g perf, prod, etc
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearEnvironment() {
            environment = null;
            fieldSetFlags()[14] = false;
            return this;
        }

        /**
         * Gets the value of the 'eventtype' field.
         * Descriptive event class
         * @return The value.
         */
        public java.lang.CharSequence getEventtype() {
            return eventtype;
        }


        /**
         * Sets the value of the 'eventtype' field.
         * Descriptive event class
         * @param value The value of 'eventtype'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setEventtype(java.lang.CharSequence value) {
            validate(fields()[15], value);
            this.eventtype = value;
            fieldSetFlags()[15] = true;
            return this;
        }

        /**
         * Checks whether the 'eventtype' field has been set.
         * Descriptive event class
         * @return True if the 'eventtype' field has been set, false otherwise.
         */
        public boolean hasEventtype() {
            return fieldSetFlags()[15];
        }


        /**
         * Clears the value of the 'eventtype' field.
         * Descriptive event class
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearEventtype() {
            eventtype = null;
            fieldSetFlags()[15] = false;
            return this;
        }

        /**
         * Gets the value of the 'locale_country' field.
         * Locale e.g. US, UK...
         * @return The value.
         */
        public java.lang.CharSequence getLocaleCountry() {
            return locale_country;
        }


        /**
         * Sets the value of the 'locale_country' field.
         * Locale e.g. US, UK...
         * @param value The value of 'locale_country'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setLocaleCountry(java.lang.CharSequence value) {
            validate(fields()[16], value);
            this.locale_country = value;
            fieldSetFlags()[16] = true;
            return this;
        }

        /**
         * Checks whether the 'locale_country' field has been set.
         * Locale e.g. US, UK...
         * @return True if the 'locale_country' field has been set, false otherwise.
         */
        public boolean hasLocaleCountry() {
            return fieldSetFlags()[16];
        }


        /**
         * Clears the value of the 'locale_country' field.
         * Locale e.g. US, UK...
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearLocaleCountry() {
            locale_country = null;
            fieldSetFlags()[16] = false;
            return this;
        }

        /**
         * Gets the value of the 'locale_language' field.
         * Language e.g. en, fr, ja...
         * @return The value.
         */
        public java.lang.CharSequence getLocaleLanguage() {
            return locale_language;
        }


        /**
         * Sets the value of the 'locale_language' field.
         * Language e.g. en, fr, ja...
         * @param value The value of 'locale_language'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setLocaleLanguage(java.lang.CharSequence value) {
            validate(fields()[17], value);
            this.locale_language = value;
            fieldSetFlags()[17] = true;
            return this;
        }

        /**
         * Checks whether the 'locale_language' field has been set.
         * Language e.g. en, fr, ja...
         * @return True if the 'locale_language' field has been set, false otherwise.
         */
        public boolean hasLocaleLanguage() {
            return fieldSetFlags()[17];
        }


        /**
         * Clears the value of the 'locale_language' field.
         * Language e.g. en, fr, ja...
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearLocaleLanguage() {
            locale_language = null;
            fieldSetFlags()[17] = false;
            return this;
        }

        /**
         * Gets the value of the 'metric' field.
         * TBD
         * @return The value.
         */
        public int getMetric() {
            return metric;
        }


        /**
         * Sets the value of the 'metric' field.
         * TBD
         * @param value The value of 'metric'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setMetric(int value) {
            validate(fields()[18], value);
            this.metric = value;
            fieldSetFlags()[18] = true;
            return this;
        }

        /**
         * Checks whether the 'metric' field has been set.
         * TBD
         * @return True if the 'metric' field has been set, false otherwise.
         */
        public boolean hasMetric() {
            return fieldSetFlags()[18];
        }


        /**
         * Clears the value of the 'metric' field.
         * TBD
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearMetric() {
            fieldSetFlags()[18] = false;
            return this;
        }

        /**
         * Gets the value of the 'notification_type' field.
         * NCP notification type
         * @return The value.
         */
        public java.lang.CharSequence getNotificationType() {
            return notification_type;
        }


        /**
         * Sets the value of the 'notification_type' field.
         * NCP notification type
         * @param value The value of 'notification_type'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setNotificationType(java.lang.CharSequence value) {
            validate(fields()[19], value);
            this.notification_type = value;
            fieldSetFlags()[19] = true;
            return this;
        }

        /**
         * Checks whether the 'notification_type' field has been set.
         * NCP notification type
         * @return True if the 'notification_type' field has been set, false otherwise.
         */
        public boolean hasNotificationType() {
            return fieldSetFlags()[19];
        }


        /**
         * Clears the value of the 'notification_type' field.
         * NCP notification type
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearNotificationType() {
            notification_type = null;
            fieldSetFlags()[19] = false;
            return this;
        }

        /**
         * Gets the value of the 'record_type' field.
         * The lifecycle state this record is in
         * @return The value.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NOTIFICATION_STATE_TYPE getRecordType() {
            return record_type;
        }


        /**
         * Sets the value of the 'record_type' field.
         * The lifecycle state this record is in
         * @param value The value of 'record_type'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setRecordType(com.chrislomeli.kafka.generator.loadgenerator.schema.NOTIFICATION_STATE_TYPE value) {
            validate(fields()[20], value);
            this.record_type = value;
            fieldSetFlags()[20] = true;
            return this;
        }

        /**
         * Checks whether the 'record_type' field has been set.
         * The lifecycle state this record is in
         * @return True if the 'record_type' field has been set, false otherwise.
         */
        public boolean hasRecordType() {
            return fieldSetFlags()[20];
        }


        /**
         * Clears the value of the 'record_type' field.
         * The lifecycle state this record is in
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearRecordType() {
            record_type = null;
            fieldSetFlags()[20] = false;
            return this;
        }

        /**
         * Gets the value of the 'request_id' field.
         * NCP request Id
         * @return The value.
         */
        public java.lang.CharSequence getRequestId() {
            return request_id;
        }


        /**
         * Sets the value of the 'request_id' field.
         * NCP request Id
         * @param value The value of 'request_id'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setRequestId(java.lang.CharSequence value) {
            validate(fields()[21], value);
            this.request_id = value;
            fieldSetFlags()[21] = true;
            return this;
        }

        /**
         * Checks whether the 'request_id' field has been set.
         * NCP request Id
         * @return True if the 'request_id' field has been set, false otherwise.
         */
        public boolean hasRequestId() {
            return fieldSetFlags()[21];
        }


        /**
         * Clears the value of the 'request_id' field.
         * NCP request Id
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearRequestId() {
            request_id = null;
            fieldSetFlags()[21] = false;
            return this;
        }

        /**
         * Gets the value of the 'short_name' field.
         * App team and service name string
         * @return The value.
         */
        public java.lang.CharSequence getShortName() {
            return short_name;
        }


        /**
         * Sets the value of the 'short_name' field.
         * App team and service name string
         * @param value The value of 'short_name'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setShortName(java.lang.CharSequence value) {
            validate(fields()[22], value);
            this.short_name = value;
            fieldSetFlags()[22] = true;
            return this;
        }

        /**
         * Checks whether the 'short_name' field has been set.
         * App team and service name string
         * @return True if the 'short_name' field has been set, false otherwise.
         */
        public boolean hasShortName() {
            return fieldSetFlags()[22];
        }


        /**
         * Clears the value of the 'short_name' field.
         * App team and service name string
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearShortName() {
            short_name = null;
            fieldSetFlags()[22] = false;
            return this;
        }

        /**
         * Gets the value of the 'status' field.
         * The status of this record
         * @return The value.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NOTIFICATION_STATUS_TYPE getStatus() {
            return status;
        }


        /**
         * Sets the value of the 'status' field.
         * The status of this record
         * @param value The value of 'status'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setStatus(com.chrislomeli.kafka.generator.loadgenerator.schema.NOTIFICATION_STATUS_TYPE value) {
            validate(fields()[23], value);
            this.status = value;
            fieldSetFlags()[23] = true;
            return this;
        }

        /**
         * Checks whether the 'status' field has been set.
         * The status of this record
         * @return True if the 'status' field has been set, false otherwise.
         */
        public boolean hasStatus() {
            return fieldSetFlags()[23];
        }


        /**
         * Clears the value of the 'status' field.
         * The status of this record
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearStatus() {
            status = null;
            fieldSetFlags()[23] = false;
            return this;
        }

        /**
         * Gets the value of the 'message' field.
         * NGAP required failure reason, but should just call it message in case it gets used for non failures in future
         * @return The value.
         */
        public java.lang.CharSequence getMessage() {
            return message;
        }


        /**
         * Sets the value of the 'message' field.
         * NGAP required failure reason, but should just call it message in case it gets used for non failures in future
         * @param value The value of 'message'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setMessage(java.lang.CharSequence value) {
            validate(fields()[24], value);
            this.message = value;
            fieldSetFlags()[24] = true;
            return this;
        }

        /**
         * Checks whether the 'message' field has been set.
         * NGAP required failure reason, but should just call it message in case it gets used for non failures in future
         * @return True if the 'message' field has been set, false otherwise.
         */
        public boolean hasMessage() {
            return fieldSetFlags()[24];
        }


        /**
         * Clears the value of the 'message' field.
         * NGAP required failure reason, but should just call it message in case it gets used for non failures in future
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearMessage() {
            message = null;
            fieldSetFlags()[24] = false;
            return this;
        }

        /**
         * Gets the value of the 'step' field.
         * accept_request, gather_data, determine_target, render, transport
         * @return The value.
         */
        public java.lang.CharSequence getStep() {
            return step;
        }


        /**
         * Sets the value of the 'step' field.
         * accept_request, gather_data, determine_target, render, transport
         * @param value The value of 'step'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setStep(java.lang.CharSequence value) {
            validate(fields()[25], value);
            this.step = value;
            fieldSetFlags()[25] = true;
            return this;
        }

        /**
         * Checks whether the 'step' field has been set.
         * accept_request, gather_data, determine_target, render, transport
         * @return True if the 'step' field has been set, false otherwise.
         */
        public boolean hasStep() {
            return fieldSetFlags()[25];
        }


        /**
         * Clears the value of the 'step' field.
         * accept_request, gather_data, determine_target, render, transport
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearStep() {
            step = null;
            fieldSetFlags()[25] = false;
            return this;
        }

        /**
         * Gets the value of the 'time_taken' field.
         * The time in milliseconds that this record took to process within this application
         * @return The value.
         */
        public long getTimeTaken() {
            return time_taken;
        }


        /**
         * Sets the value of the 'time_taken' field.
         * The time in milliseconds that this record took to process within this application
         * @param value The value of 'time_taken'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setTimeTaken(long value) {
            validate(fields()[26], value);
            this.time_taken = value;
            fieldSetFlags()[26] = true;
            return this;
        }

        /**
         * Checks whether the 'time_taken' field has been set.
         * The time in milliseconds that this record took to process within this application
         * @return True if the 'time_taken' field has been set, false otherwise.
         */
        public boolean hasTimeTaken() {
            return fieldSetFlags()[26];
        }


        /**
         * Clears the value of the 'time_taken' field.
         * The time in milliseconds that this record took to process within this application
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearTimeTaken() {
            fieldSetFlags()[26] = false;
            return this;
        }

        /**
         * Gets the value of the 'tag' field.
         * @return The value.
         */
        public java.lang.CharSequence getTag() {
            return tag;
        }


        /**
         * Sets the value of the 'tag' field.
         * @param value The value of 'tag'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setTag(java.lang.CharSequence value) {
            validate(fields()[27], value);
            this.tag = value;
            fieldSetFlags()[27] = true;
            return this;
        }

        /**
         * Checks whether the 'tag' field has been set.
         * @return True if the 'tag' field has been set, false otherwise.
         */
        public boolean hasTag() {
            return fieldSetFlags()[27];
        }


        /**
         * Clears the value of the 'tag' field.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearTag() {
            tag = null;
            fieldSetFlags()[27] = false;
            return this;
        }

        /**
         * Gets the value of the 'upmid' field.
         * NCP user identifier
         * @return The value.
         */
        public java.lang.CharSequence getUpmid() {
            return upmid;
        }


        /**
         * Sets the value of the 'upmid' field.
         * NCP user identifier
         * @param value The value of 'upmid'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setUpmid(java.lang.CharSequence value) {
            validate(fields()[28], value);
            this.upmid = value;
            fieldSetFlags()[28] = true;
            return this;
        }

        /**
         * Checks whether the 'upmid' field has been set.
         * NCP user identifier
         * @return True if the 'upmid' field has been set, false otherwise.
         */
        public boolean hasUpmid() {
            return fieldSetFlags()[28];
        }


        /**
         * Clears the value of the 'upmid' field.
         * NCP user identifier
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearUpmid() {
            upmid = null;
            fieldSetFlags()[28] = false;
            return this;
        }

        /**
         * Gets the value of the 'user_notification_id' field.
         * NCP user notification identity
         * @return The value.
         */
        public java.lang.CharSequence getUserNotificationId() {
            return user_notification_id;
        }


        /**
         * Sets the value of the 'user_notification_id' field.
         * NCP user notification identity
         * @param value The value of 'user_notification_id'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setUserNotificationId(java.lang.CharSequence value) {
            validate(fields()[29], value);
            this.user_notification_id = value;
            fieldSetFlags()[29] = true;
            return this;
        }

        /**
         * Checks whether the 'user_notification_id' field has been set.
         * NCP user notification identity
         * @return True if the 'user_notification_id' field has been set, false otherwise.
         */
        public boolean hasUserNotificationId() {
            return fieldSetFlags()[29];
        }


        /**
         * Clears the value of the 'user_notification_id' field.
         * NCP user notification identity
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearUserNotificationId() {
            user_notification_id = null;
            fieldSetFlags()[29] = false;
            return this;
        }

        /**
         * Gets the value of the 'vendor' field.
         * NGAP required vendor that this notification is directed to - this is null before determine_target
         * @return The value.
         */
        public java.lang.CharSequence getVendor() {
            return vendor;
        }


        /**
         * Sets the value of the 'vendor' field.
         * NGAP required vendor that this notification is directed to - this is null before determine_target
         * @param value The value of 'vendor'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setVendor(java.lang.CharSequence value) {
            validate(fields()[30], value);
            this.vendor = value;
            fieldSetFlags()[30] = true;
            return this;
        }

        /**
         * Checks whether the 'vendor' field has been set.
         * NGAP required vendor that this notification is directed to - this is null before determine_target
         * @return True if the 'vendor' field has been set, false otherwise.
         */
        public boolean hasVendor() {
            return fieldSetFlags()[30];
        }


        /**
         * Clears the value of the 'vendor' field.
         * NGAP required vendor that this notification is directed to - this is null before determine_target
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearVendor() {
            vendor = null;
            fieldSetFlags()[30] = false;
            return this;
        }

        /**
         * Gets the value of the 'version' field.
         * CDS version number .e.g. v2
         * @return The value.
         */
        public java.lang.CharSequence getVersion() {
            return version;
        }


        /**
         * Sets the value of the 'version' field.
         * CDS version number .e.g. v2
         * @param value The value of 'version'.
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder setVersion(java.lang.CharSequence value) {
            validate(fields()[31], value);
            this.version = value;
            fieldSetFlags()[31] = true;
            return this;
        }

        /**
         * Checks whether the 'version' field has been set.
         * CDS version number .e.g. v2
         * @return True if the 'version' field has been set, false otherwise.
         */
        public boolean hasVersion() {
            return fieldSetFlags()[31];
        }


        /**
         * Clears the value of the 'version' field.
         * CDS version number .e.g. v2
         * @return This builder.
         */
        public com.chrislomeli.kafka.generator.loadgenerator.schema.NotificationStatus.Builder clearVersion() {
            version = null;
            fieldSetFlags()[31] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public NotificationStatus build() {
            try {
                NotificationStatus record = new NotificationStatus();
                record.send_id = fieldSetFlags()[0] ? this.send_id : (java.lang.CharSequence) defaultValue(fields()[0]);
                record.start_time = fieldSetFlags()[1] ? this.start_time : (java.time.Instant) defaultValue(fields()[1]);
                record.end_time = fieldSetFlags()[2] ? this.end_time : (java.time.Instant) defaultValue(fields()[2]);
                record.received_time = fieldSetFlags()[3] ? this.received_time : (java.time.Instant) defaultValue(fields()[3]);
                record.publish_time = fieldSetFlags()[4] ? this.publish_time : (java.time.Instant) defaultValue(fields()[4]);
                record.api_version = fieldSetFlags()[5] ? this.api_version : (java.lang.CharSequence) defaultValue(fields()[5]);
                record.app = fieldSetFlags()[6] ? this.app : (java.lang.CharSequence) defaultValue(fields()[6]);
                record.application = fieldSetFlags()[7] ? this.application : (java.lang.CharSequence) defaultValue(fields()[7]);
                record.appteam = fieldSetFlags()[8] ? this.appteam : (java.lang.CharSequence) defaultValue(fields()[8]);
                record.awshost = fieldSetFlags()[9] ? this.awshost : (java.lang.CharSequence) defaultValue(fields()[9]);
                record.comm_id = fieldSetFlags()[10] ? this.comm_id : (java.lang.CharSequence) defaultValue(fields()[10]);
                record.cp_code = fieldSetFlags()[11] ? this.cp_code : (java.lang.CharSequence) defaultValue(fields()[11]);
                record.delivery_channel = fieldSetFlags()[12] ? this.delivery_channel : (java.lang.CharSequence) defaultValue(fields()[12]);
                record.destination = fieldSetFlags()[13] ? this.destination : (java.lang.CharSequence) defaultValue(fields()[13]);
                record.environment = fieldSetFlags()[14] ? this.environment : (java.lang.CharSequence) defaultValue(fields()[14]);
                record.eventtype = fieldSetFlags()[15] ? this.eventtype : (java.lang.CharSequence) defaultValue(fields()[15]);
                record.locale_country = fieldSetFlags()[16] ? this.locale_country : (java.lang.CharSequence) defaultValue(fields()[16]);
                record.locale_language = fieldSetFlags()[17] ? this.locale_language : (java.lang.CharSequence) defaultValue(fields()[17]);
                record.metric = fieldSetFlags()[18] ? this.metric : (java.lang.Integer) defaultValue(fields()[18]);
                record.notification_type = fieldSetFlags()[19] ? this.notification_type : (java.lang.CharSequence) defaultValue(fields()[19]);
                record.record_type = fieldSetFlags()[20] ? this.record_type : (com.chrislomeli.kafka.generator.loadgenerator.schema.NOTIFICATION_STATE_TYPE) defaultValue(fields()[20]);
                record.request_id = fieldSetFlags()[21] ? this.request_id : (java.lang.CharSequence) defaultValue(fields()[21]);
                record.short_name = fieldSetFlags()[22] ? this.short_name : (java.lang.CharSequence) defaultValue(fields()[22]);
                record.status = fieldSetFlags()[23] ? this.status : (com.chrislomeli.kafka.generator.loadgenerator.schema.NOTIFICATION_STATUS_TYPE) defaultValue(fields()[23]);
                record.message = fieldSetFlags()[24] ? this.message : (java.lang.CharSequence) defaultValue(fields()[24]);
                record.step = fieldSetFlags()[25] ? this.step : (java.lang.CharSequence) defaultValue(fields()[25]);
                record.time_taken = fieldSetFlags()[26] ? this.time_taken : (java.lang.Long) defaultValue(fields()[26]);
                record.tag = fieldSetFlags()[27] ? this.tag : (java.lang.CharSequence) defaultValue(fields()[27]);
                record.upmid = fieldSetFlags()[28] ? this.upmid : (java.lang.CharSequence) defaultValue(fields()[28]);
                record.user_notification_id = fieldSetFlags()[29] ? this.user_notification_id : (java.lang.CharSequence) defaultValue(fields()[29]);
                record.vendor = fieldSetFlags()[30] ? this.vendor : (java.lang.CharSequence) defaultValue(fields()[30]);
                record.version = fieldSetFlags()[31] ? this.version : (java.lang.CharSequence) defaultValue(fields()[31]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<NotificationStatus>
            WRITER$ = (org.apache.avro.io.DatumWriter<NotificationStatus>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<NotificationStatus>
            READER$ = (org.apache.avro.io.DatumReader<NotificationStatus>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

}
